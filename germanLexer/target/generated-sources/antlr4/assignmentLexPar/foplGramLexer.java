// Generated from foplGram.g4 by ANTLR 4.4

package assignmentLexPar;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class foplGramLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__26=1, T__25=2, T__24=3, T__23=4, T__22=5, T__21=6, T__20=7, T__19=8, 
		T__18=9, T__17=10, T__16=11, T__15=12, T__14=13, T__13=14, T__12=15, T__11=16, 
		T__10=17, T__9=18, T__8=19, T__7=20, T__6=21, T__5=22, T__4=23, T__3=24, 
		T__2=25, T__1=26, T__0=27, POINT=28, COMMA=29, TERM=30, SYMBOL=31, COMPARATOR=32, 
		OPERATOR=33, TYPE=34, LETTER=35, WORD=36, BOOLVAL=37, NUMBER=38, BLOCKOPEN=39, 
		BLOCKCLOSE=40, WS=41;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'"
	};
	public static final String[] ruleNames = {
		"T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "LCASE", "UCASE", "DIGIT", "POINT", "COMMA", "TERM", "SYMBOL", 
		"COMPARATOR", "OPERATOR", "TYPE", "LETTER", "WORD", "BOOLVAL", "NUMBER", 
		"BLOCKOPEN", "BLOCKCLOSE", "WS"
	};


	public foplGramLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "foplGram.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2+\u0130\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22"+
		"\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26"+
		"\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30"+
		"\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\34"+
		"\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\""+
		"\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u00f2\n$\3%\3%\3&\3&\3&\3&\3&"+
		"\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0108\n&\3\'\3\'\5\'\u010c"+
		"\n\'\3(\6(\u010f\n(\r(\16(\u0110\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u011c\n"+
		")\3*\6*\u011f\n*\r*\16*\u0120\3*\3*\6*\u0125\n*\r*\16*\u0126\3+\3+\3,"+
		"\3,\3-\3-\3-\3-\2\2.\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27"+
		"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33"+
		"\65\34\67\359\2;\2=\2?\36A\37C E!G\"I#K$M%O&Q\'S(U)W*Y+\3\2\b\3\2c|\3"+
		"\2C\\\3\2\62;\5\2##<<BB\6\2\'\',-//\61\61\5\2\13\f\17\17\"\"\u0138\2\3"+
		"\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2"+
		"\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31"+
		"\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2"+
		"\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2"+
		"\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2?\3\2\2\2\2A\3\2\2"+
		"\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2"+
		"O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\3[\3"+
		"\2\2\2\5a\3\2\2\2\7h\3\2\2\2\tq\3\2\2\2\13s\3\2\2\2\r|\3\2\2\2\17\177"+
		"\3\2\2\2\21\u0084\3\2\2\2\23\u0086\3\2\2\2\25\u008d\3\2\2\2\27\u0090\3"+
		"\2\2\2\31\u0095\3\2\2\2\33\u0099\3\2\2\2\35\u00a1\3\2\2\2\37\u00a6\3\2"+
		"\2\2!\u00a8\3\2\2\2#\u00aa\3\2\2\2%\u00af\3\2\2\2\'\u00b1\3\2\2\2)\u00b4"+
		"\3\2\2\2+\u00b6\3\2\2\2-\u00bb\3\2\2\2/\u00c6\3\2\2\2\61\u00c8\3\2\2\2"+
		"\63\u00cc\3\2\2\2\65\u00ce\3\2\2\2\67\u00d4\3\2\2\29\u00d9\3\2\2\2;\u00db"+
		"\3\2\2\2=\u00dd\3\2\2\2?\u00df\3\2\2\2A\u00e1\3\2\2\2C\u00e3\3\2\2\2E"+
		"\u00e5\3\2\2\2G\u00f1\3\2\2\2I\u00f3\3\2\2\2K\u0107\3\2\2\2M\u010b\3\2"+
		"\2\2O\u010e\3\2\2\2Q\u011b\3\2\2\2S\u011e\3\2\2\2U\u0128\3\2\2\2W\u012a"+
		"\3\2\2\2Y\u012c\3\2\2\2[\\\7f\2\2\\]\7g\2\2]^\7h\2\2^_\7\"\2\2_`\7<\2"+
		"\2`\4\3\2\2\2ab\7t\2\2bc\7g\2\2cd\7v\2\2de\7w\2\2ef\7t\2\2fg\7p\2\2g\6"+
		"\3\2\2\2hi\7<\2\2ij\7<\2\2jk\7i\2\2kl\7n\2\2lm\7q\2\2mn\7d\2\2no\7c\2"+
		"\2op\7n\2\2p\b\3\2\2\2qr\7?\2\2r\n\3\2\2\2st\7g\2\2tu\7n\2\2uv\7u\2\2"+
		"vw\7g\2\2wx\7k\2\2xy\7h\2\2yz\7\"\2\2z{\7*\2\2{\f\3\2\2\2|}\7f\2\2}~\7"+
		"q\2\2~\16\3\2\2\2\177\u0080\7q\2\2\u0080\u0081\7w\2\2\u0081\u0082\7v\2"+
		"\2\u0082\u0083\7*\2\2\u0083\20\3\2\2\2\u0084\u0085\7*\2\2\u0085\22\3\2"+
		"\2\2\u0086\u0087\7t\2\2\u0087\u0088\7q\2\2\u0088\u0089\7w\2\2\u0089\u008a"+
		"\7v\2\2\u008a\u008b\7g\2\2\u008b\u008c\7*\2\2\u008c\24\3\2\2\2\u008d\u008e"+
		"\7/\2\2\u008e\u008f\7@\2\2\u008f\26\3\2\2\2\u0090\u0091\7e\2\2\u0091\u0092"+
		"\7c\2\2\u0092\u0093\7u\2\2\u0093\u0094\7g\2\2\u0094\30\3\2\2\2\u0095\u0096"+
		"\7k\2\2\u0096\u0097\7p\2\2\u0097\u0098\7*\2\2\u0098\32\3\2\2\2\u0099\u009a"+
		"\7y\2\2\u009a\u009b\7j\2\2\u009b\u009c\7k\2\2\u009c\u009d\7n\2\2\u009d"+
		"\u009e\7g\2\2\u009e\u009f\7\"\2\2\u009f\u00a0\7*\2\2\u00a0\34\3\2\2\2"+
		"\u00a1\u00a2\7k\2\2\u00a2\u00a3\7h\2\2\u00a3\u00a4\7\"\2\2\u00a4\u00a5"+
		"\7*\2\2\u00a5\36\3\2\2\2\u00a6\u00a7\7<\2\2\u00a7 \3\2\2\2\u00a8\u00a9"+
		"\7]\2\2\u00a9\"\3\2\2\2\u00aa\u00ab\7f\2\2\u00ab\u00ac\7t\2\2\u00ac\u00ad"+
		"\7q\2\2\u00ad\u00ae\7r\2\2\u00ae$\3\2\2\2\u00af\u00b0\7_\2\2\u00b0&\3"+
		"\2\2\2\u00b1\u00b2\7q\2\2\u00b2\u00b3\7t\2\2\u00b3(\3\2\2\2\u00b4\u00b5"+
		"\7%\2\2\u00b5*\3\2\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9"+
		"\7u\2\2\u00b9\u00ba\7g\2\2\u00ba,\3\2\2\2\u00bb\u00bc\7h\2\2\u00bc\u00bd"+
		"\7q\2\2\u00bd\u00be\7t\2\2\u00be\u00bf\7\"\2\2\u00bf\u00c0\7*\2\2\u00c0"+
		"\u00c1\7h\2\2\u00c1\u00c2\7n\2\2\u00c2\u00c3\7q\2\2\u00c3\u00c4\7c\2\2"+
		"\u00c4\u00c5\7v\2\2\u00c5.\3\2\2\2\u00c6\u00c7\7+\2\2\u00c7\60\3\2\2\2"+
		"\u00c8\u00c9\7c\2\2\u00c9\u00ca\7p\2\2\u00ca\u00cb\7f\2\2\u00cb\62\3\2"+
		"\2\2\u00cc\u00cd\7-\2\2\u00cd\64\3\2\2\2\u00ce\u00cf\7c\2\2\u00cf\u00d0"+
		"\7t\2\2\u00d0\u00d1\7t\2\2\u00d1\u00d2\7c\2\2\u00d2\u00d3\7{\2\2\u00d3"+
		"\66\3\2\2\2\u00d4\u00d5\7_\2\2\u00d5\u00d6\7\"\2\2\u00d6\u00d7\7?\2\2"+
		"\u00d7\u00d8\7\"\2\2\u00d88\3\2\2\2\u00d9\u00da\t\2\2\2\u00da:\3\2\2\2"+
		"\u00db\u00dc\t\3\2\2\u00dc<\3\2\2\2\u00dd\u00de\t\4\2\2\u00de>\3\2\2\2"+
		"\u00df\u00e0\7\60\2\2\u00e0@\3\2\2\2\u00e1\u00e2\7.\2\2\u00e2B\3\2\2\2"+
		"\u00e3\u00e4\7=\2\2\u00e4D\3\2\2\2\u00e5\u00e6\t\5\2\2\u00e6F\3\2\2\2"+
		"\u00e7\u00f2\7\u0080\2\2\u00e8\u00e9\7`\2\2\u00e9\u00f2\7?\2\2\u00ea\u00eb"+
		"\7?\2\2\u00eb\u00f2\7\u0080\2\2\u00ec\u00f2\7`\2\2\u00ed\u00ee\7?\2\2"+
		"\u00ee\u00f2\7?\2\2\u00ef\u00f0\7#\2\2\u00f0\u00f2\7?\2\2\u00f1\u00e7"+
		"\3\2\2\2\u00f1\u00e8\3\2\2\2\u00f1\u00ea\3\2\2\2\u00f1\u00ec\3\2\2\2\u00f1"+
		"\u00ed\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2H\3\2\2\2\u00f3\u00f4\t\6\2\2"+
		"\u00f4J\3\2\2\2\u00f5\u00f6\7h\2\2\u00f6\u00f7\7n\2\2\u00f7\u00f8\7q\2"+
		"\2\u00f8\u00f9\7c\2\2\u00f9\u0108\7v\2\2\u00fa\u00fb\7u\2\2\u00fb\u00fc"+
		"\7v\2\2\u00fc\u00fd\7t\2\2\u00fd\u00fe\7k\2\2\u00fe\u00ff\7p\2\2\u00ff"+
		"\u0108\7i\2\2\u0100\u0101\7d\2\2\u0101\u0102\7q\2\2\u0102\u0103\7q\2\2"+
		"\u0103\u0104\7n\2\2\u0104\u0105\7g\2\2\u0105\u0106\7c\2\2\u0106\u0108"+
		"\7p\2\2\u0107\u00f5\3\2\2\2\u0107\u00fa\3\2\2\2\u0107\u0100\3\2\2\2\u0108"+
		"L\3\2\2\2\u0109\u010c\59\35\2\u010a\u010c\5;\36\2\u010b\u0109\3\2\2\2"+
		"\u010b\u010a\3\2\2\2\u010cN\3\2\2\2\u010d\u010f\5M\'\2\u010e\u010d\3\2"+
		"\2\2\u010f\u0110\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111"+
		"P\3\2\2\2\u0112\u0113\7v\2\2\u0113\u0114\7t\2\2\u0114\u0115\7w\2\2\u0115"+
		"\u011c\7g\2\2\u0116\u0117\7h\2\2\u0117\u0118\7c\2\2\u0118\u0119\7n\2\2"+
		"\u0119\u011a\7u\2\2\u011a\u011c\7g\2\2\u011b\u0112\3\2\2\2\u011b\u0116"+
		"\3\2\2\2\u011cR\3\2\2\2\u011d\u011f\5=\37\2\u011e\u011d\3\2\2\2\u011f"+
		"\u0120\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0122\3\2"+
		"\2\2\u0122\u0124\5? \2\u0123\u0125\5=\37\2\u0124\u0123\3\2\2\2\u0125\u0126"+
		"\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127T\3\2\2\2\u0128"+
		"\u0129\7}\2\2\u0129V\3\2\2\2\u012a\u012b\7\177\2\2\u012bX\3\2\2\2\u012c"+
		"\u012d\t\7\2\2\u012d\u012e\3\2\2\2\u012e\u012f\b-\2\2\u012fZ\3\2\2\2\n"+
		"\2\u00f1\u0107\u010b\u0110\u011b\u0120\u0126\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}